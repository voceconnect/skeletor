@import "mixins";

.flex {
  /*
  // must have: flex, inline-flex
  display: flex;

  // layout: row, row-reverse, column, column-reverse
  flex-direction: row;

  // allow more than one line wrapping: nowrap, wrap, wrap-reverse
  flex-wrap: nowrap;

  // shortcut combines flex direction and flex wrap
  flex-flow: row nowrap;

  // horizontal spacing of items: flex-start, flex-end, center, space-between, space-around
  justify-content: flex-start;

  // vertical-centering: flex-start, flex-end, center, stretch, baseline,
  align-items: flex-start;

  // vertically align if extra space: flex-start, flex-end, center, stretch, space-between, space-around
  align-content: flex-start;

  */
  display: flex;
  flex-flow: row wrap;
  justify-content: space-around;
  align-items: flex-start;
  align-content: center;

  @include breakpoint(phone){
    flex-wrap: wrap;
    justify-content: center;
  }

  min-height: 400px;
  padding: 20px 0;
  background: #ededed;
  align-items: center;

  .no-flexbox & {

  }
}
.box {
  /*
  // display: order
  order: 1;

  // if you want one box to get bigger than the others
  flex-grow: 0;

  // if you want one box to get smaller than the others
  flex-shrink: 1;

  // seems like a max-width value. default size before space is distributed. probably best applied individually
  flex-basis: auto;

  // shorthand for flex-grow, flex-shrink, flex-basis
  flex: 0 1 auto;

  // individually align a box - auto | flex-start | flex-end | center | baseline | stretch
  align-self: auto;
  */

  flex: 0 1 20%;
  align-self: auto;

  box-sizing:border-box;
  padding: 20px;
  margin: 10px 2%;
  background: gray;
  border-radius: 8px;
  &:first-child {

  }
  &:nth-child(2){

  }
  &:nth-child(3){

  }
  &:last-child {

  }

  img {
    max-width: 100%;
    height: auto;
  }
  
  .no-flexbox & {
    display: inline-block;
    max-width: 20%;
  }
}
