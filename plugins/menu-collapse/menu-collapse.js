// Generated by CoffeeScript 1.3.1
(function() {
  var $, options;

  $ = jQuery;

  $.fn.menuCollapse = function(o) {
    var d, m;
    d = {
      menuList: 'ul.menu li',
      togglerClass: 'toggler',
      closedSymbol: '+',
      openSymbol: '-'
    };
    d = $.extend(d, o);
    m = {
      init: function() {
        var _this = this;
        $("" + d.menuList).each(function(index, element) {
          if (m.getDepth($(element).next('li')) > m.getDepth($(element))) {
            return m.addToggler($(element));
          }
        });
        m.attachHandler();
        return $("a." + d.togglerClass).click();
      },
      getDepth: function(el) {
        var theClass;
        theClass = el.attr('class');
        if (typeof theClass !== 'undefined' && (theClass != null)) {
          theClass = theClass.split(/\s/)[1];
          return theClass.charAt(theClass.length - 1);
        }
      },
      addToggler: function(el, status) {
        var symbol;
        if (status == null) {
          status = 'open';
        }
        symbol = d.openSymbol;
        if (status === 'close') {
          symbol = d.closedSymbol;
        }
        return el.append("<a class='" + d.togglerClass + "' rel='" + status + "'>" + symbol + "</a>");
      },
      getChildren: function(el, allChildren) {
        var $children, parentDepth, parentLI, siblings,
          _this = this;
        if (allChildren == null) {
          allChildren = false;
        }
        parentLI = el.parent('li');
        parentDepth = m.getDepth(parentLI);
        $children = $();
        siblings = parentLI.nextAll('li');
        siblings.each(function(index, element) {
          if (parentDepth < m.getDepth($(element))) {
            if (allChildren === true) {
              if (parentDepth < m.getDepth($(element))) {
                return $children = $children.add($(element));
              }
            } else {
              if ((parentDepth - m.getDepth($(element))) === -1) {
                return $children = $children.add($(element));
              }
            }
          } else {
            return false;
          }
        });
        return $children;
      },
      getState: function(el) {
        if (typeof el !== 'undefined' && (el != null)) {
          return el.attr('rel');
        } else {
          return false;
        }
      },
      switchToggler: function(el) {
        var state;
        state = m.getState(el);
        if (state === 'open') {
          el.text("" + d.closedSymbol);
          return el.attr('rel', 'closed');
        } else if (state === 'closed') {
          el.text("" + d.openSymbol);
          return el.attr('rel', 'open');
        } else {
          return false;
        }
      },
      attachHandler: function() {
        return $("a." + d.togglerClass).toggle(function() {
          var allChildren;
          allChildren = m.getChildren($(this), true);
          $(allChildren).slideUp();
          return m.switchToggler($(this));
        }, function() {
          var allChildren;
          allChildren = m.getChildren($(this));
          m.getChildren($(this)).slideDown();
          return m.switchToggler($(this));
        });
      }
    };
    return m.init();
  };

  options = {
    closedSymbol: ">",
    openSymbol: "<"
  };

  $(document).ready(function() {
    return $().menuCollapse(options);
  });

}).call(this);
