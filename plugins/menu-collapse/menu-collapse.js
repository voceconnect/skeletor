// Generated by CoffeeScript 1.3.1
(function() {
  var $;

  $ = jQuery;

  $.fn.menuCollapse = function(o) {
    var m, s;
    s = {
      menuListItem: 'ul.menu li',
      togglerElem: 'a',
      togglerClass: 'toggler',
      closedSymbol: '+',
      openSymbol: '-',
      speed: '400'
    };
    s = $.extend(s, o);
    m = {
      init: function() {
        var _this = this;
        m.destroy();
        $("" + s.menuListItem).each(function(index, element) {
          var nextDepth, nextLI, prevDepth, prevLI, thisDepth, togglerSelector;
          prevLI = $(element).prev('li');
          nextLI = $(element).next('li');
          thisDepth = m.getDepth($(element));
          nextDepth = m.getDepth(nextLI);
          prevDepth = m.getDepth(prevLI);
          togglerSelector = "" + s.togglerElem + "." + s.togglerClass;
          if (thisDepth < nextDepth && nextDepth !== false) {
            return m.addToggler($(element));
          } else if (thisDepth > nextDepth || thisDepth === nextDepth || nextDepth === false) {
            return m.destroy(nextLI.find(togglerSelector));
          } else if (thisDepth > prevDepth || thisDepth === prevDepth || prevDepth === false) {
            return m.destroy(prevLI.find(togglerSelector));
          }
        });
        $("" + s.togglerElem + "." + s.togglerClass).bind('click', m.clickEvent);
        return this;
      },
      getDepth: function(el) {
        var theClass;
        theClass = el.attr('class');
        if (typeof theClass !== 'undefined' && (theClass != null)) {
          theClass = theClass.match(/menu-item-depth-./).toString();
          return parseInt(theClass.charAt(theClass.length - 1));
        }
        return false;
      },
      addToggler: function(el, status) {
        var symbol;
        if (status == null) {
          status = 'open';
        }
        symbol = s.openSymbol;
        if (status === 'close') {
          symbol = s.closedSymbol;
        }
        return el.append("<" + s.togglerElem + " class='" + s.togglerClass + "' rel='" + status + "'>" + symbol + "</" + s.togglerElem + ">");
      },
      getChildren: function(el, allChildren) {
        var children, parentDepth, parentLI, siblings,
          _this = this;
        if (allChildren == null) {
          allChildren = false;
        }
        parentLI = el.parent('li');
        parentDepth = m.getDepth(parentLI);
        children = $();
        siblings = parentLI.nextAll('li');
        siblings.each(function(index, element) {
          if (parentDepth < m.getDepth($(element) || parentDepth === m.getDepth($(element)))) {
            if (allChildren === true) {
              if (parentDepth < m.getDepth($(element))) {
                return children = children.add($(element));
              }
            } else {
              if ((parentDepth - m.getDepth($(element))) === -1) {
                return children = children.add($(element));
              }
            }
          } else {

          }
        });
        return children;
      },
      getState: function(el) {
        if (typeof el !== void 0) {
          if (typeof $(el).attr('rel') !== void 0) {
            return $(el).attr('rel');
          }
        } else {
          return false;
        }
      },
      switchToggler: function(el, state) {
        if (state === 'open') {
          el.attr('rel', 'closed').text("" + s.closedSymbol);
        }
        if (state === 'closed') {
          el.attr('rel', 'open').text("" + s.openSymbol);
        }
        return el.attr('rel');
      },
      clickEvent: function(event) {
        var state,
          _this = this;
        event.preventDefault();
        state = m.getState(this);
        if (state === 'open') {
          m.getChildren($(this), true).slideUp(s.speed);
        } else if (state === 'closed') {
          m.getChildren($(this), true).each(function(index, element) {
            var toggler;
            toggler = $(element).find("" + s.togglerElem + "." + s.togglerClass);
            if (m.getState(toggler) === 'open') {
              return m.getChildren(toggler).slideDown("" + (s.speed / 2));
            }
          });
          m.getChildren($(this)).slideDown(s.speed);
        }
        return m.switchToggler($(this), state);
      },
      destroy: function(el) {
        if (el == null) {
          el = null;
        }
        if (el === null) {
          el = $("" + s.togglerElem + "." + s.togglerClass);
        }
        return el.unbind('click', m.clickEvent).remove();
      }
    };
    m.init();
    return $.extend(m, s);
  };

  $(document).ready(function() {
    var menuCollapse;
    menuCollapse = $().menuCollapse();
    $("" + menuCollapse.togglerElem + "." + menuCollapse.togglerClass).click();
    return $('ul.menu').bind('sortstop', function() {
      return setTimeout("jQuery().menuCollapse()", 500);
    });
  });

}).call(this);
